=============================================================================
LineValue:=SWITCH(
    TRUE();

    // Case 1: Absolute indicator (ValueType = "A")
    // Return a simple SUM of [Value]
    HASONEVALUE(LabelHelper[ValueType]) &&
    VALUES(LabelHelper[ValueType]) = "A";
        SUM(LabelHelper[Value]);

    // Case 2: Relative indicator (ValueType = "R")
    // Return a weighted AVERAGE of [Value] using [Weight]
    HASONEVALUE(LabelHelper[ValueType]) &&
    VALUES(LabelHelper[ValueType]) = "R";
        DIVIDE(
            // Weighted numerator: SUM of (Value × Weight)
            SUMX(
                LabelHelper;
                LabelHelper[Value] * LabelHelper[Weight]
            );
            // Denominator: SUM of [Weight]
            SUMX(
                LabelHelper;
                LabelHelper[Weight]
            );
            // Fallback result in case of division by zero
            BLANK()
        );

    // Default case: no valid or unique ValueType selected — return BLANK
    BLANK()
)
=============================================================================
LastYearValue:=SWITCH(
    TRUE();

    // Case 1: Absolute indicator (Type = "A")
    // Return a simple SUM of ValueLastYear
    HASONEVALUE(LatestData[Type]) &&
    VALUES(LatestData[Type]) = "A";
        SUM(LatestData[ValueLastYear]);

    // Case 2: Relative indicator (Type = "R")
    // Return a weighted AVERAGE of ValueLastYear using Weight
    HASONEVALUE(LatestData[Type]) &&
    VALUES(LatestData[Type]) = "R";
        DIVIDE(
            // Numerator: sum of (ValueLastYear × Weight)
            SUMX(
                LatestData;
                LatestData[ValueLastYear] * LatestData[Weight]
            );
            // Denominator: sum of weights
            SUMX(
                LatestData;
                LatestData[Weight]
            );
            // Fallback result in case of division by zero
            BLANK()
        );

    // Default case: no valid type selected — return BLANK
    BLANK()
)
=============================================================================
PreviousYearValue:=SWITCH(
    TRUE();

    // Case 1: Absolute indicator (Type = "A")
    // Return total sum of ValuePreviousYear
    HASONEVALUE(LatestData[Type]) &&
    VALUES(LatestData[Type]) = "A";
        SUM(LatestData[ValuePreviousYear]);

    // Case 2: Relative indicator (Type = "R")
    // Return weighted average of ValuePreviousYear
    HASONEVALUE(LatestData[Type]) &&
    VALUES(LatestData[Type]) = "R";
        DIVIDE(
            // Numerator: weighted sum of ValuePreviousYear
            SUMX(
                LatestData;
                LatestData[ValuePreviousYear] * LatestData[Weight]
            );
            // Denominator: sum of weights
            SUMX(
                LatestData;
                LatestData[Weight]
            );
            // Handle divide-by-zero gracefully
            BLANK()
        );

    // Fallback: no valid single Type selected — return BLANK
    BLANK()
)
=============================================================================
TopN_Rank:=RANKX(
    ALLSELECTED(LatestData); 
    [LastYearValue]; 
    ; 
    DESC; 
    DENSE
)
=============================================================================
Plot_4_Min_Value:=Min(sum(LatestData[ValuePreviousYear]); sum(LatestData[ValueLastYear]))
=============================================================================
Plot_4_Abs_Gr:=ABS(SUM(LatestData[Growth, Abs]))
=============================================================================
Plot_4_Blue_1:=IF(
	AND(AND([PreviousYearValue]>=0; [LastYearValue]>=0); [PreviousYearValue]<[LastYearValue]); 0;
	IF(AND(AND([PreviousYearValue]>=0; [LastYearValue]>=0); [PreviousYearValue]>=[LastYearValue]); 0;
	IF(AND([PreviousYearValue]<0; [LastYearValue]>=0); [PreviousYearValue];
	IF(AND([PreviousYearValue]>=0; [LastYearValue]<0); [LastYearValue];
	IF(AND(AND([PreviousYearValue]<0; [LastYearValue]<0); [PreviousYearValue]<[LastYearValue]); 0;
	IF(AND(AND([PreviousYearValue]<0; [LastYearValue]<0); [PreviousYearValue]>=[LastYearValue]); 0;
	0)))))
)
=============================================================================
Plot_4_Blue_2:=IF(
	AND(AND([PreviousYearValue]>=0; [LastYearValue]>=0); [PreviousYearValue]<[LastYearValue]); AVERAGE([Growth, Abs]);
	IF(AND(AND([PreviousYearValue]>=0; [LastYearValue]>=0); [PreviousYearValue]>=[LastYearValue]); (-1)*AVERAGE([Growth, Abs]);
	IF(AND([PreviousYearValue]<0; [LastYearValue]>=0); [LastYearValue];
	IF(AND([PreviousYearValue]>=0; [LastYearValue]<0); [PreviousYearValue];
	IF(AND(AND([PreviousYearValue]<0; [LastYearValue]<0); [PreviousYearValue]<[LastYearValue]); (-1)*AVERAGE([Growth, Abs]);
	IF(AND(AND([PreviousYearValue]<0; [LastYearValue]<0); [PreviousYearValue]>=[LastYearValue]); AVERAGE([Growth, Abs]);
	0)))))
)
=============================================================================
Plot_4_White:=IF(
	AND(AND([PreviousYearValue]>=0; [LastYearValue]>=0); [PreviousYearValue]<[LastYearValue]); [PreviousYearValue];
	IF(AND(AND([PreviousYearValue]>=0; [LastYearValue]>=0); [PreviousYearValue]>=[LastYearValue]); [LastYearValue];
	IF(AND([PreviousYearValue]<0; [LastYearValue]>=0); 0;
	IF(AND([PreviousYearValue]>=0; [LastYearValue]<0); 0;
	IF(AND(AND([PreviousYearValue]<0; [LastYearValue]<0); [PreviousYearValue]<[LastYearValue]); [LastYearValue];
	IF(AND(AND([PreviousYearValue]<0; [LastYearValue]<0); [PreviousYearValue]>=[LastYearValue]); [PreviousYearValue];
	0)))))
)
=============================================================================
TopN_Growth, Abs:=RANKX(
    ALLSELECTED(LatestData); 
    [Sum of Growth, Abs]; 
    ; 
    DESC; 
    DENSE
)
=============================================================================
LastYearValue_Score:=VAR CurrentIndicator =
    // Retrieve the selected indicator, or return BLANK if multiple or none
    IF(
        HASONEVALUE(LatestData[Indicator]);
        VALUES(LatestData[Indicator]);
        BLANK()
    )

VAR MinValue =
    // Minimum value of LastYearValue within the selected indicator
    MINX(
        CALCULATETABLE(
            ALLSELECTED(LatestData);
            LatestData[Indicator] = CurrentIndicator
        );
        [LastYearValue]
    )

VAR MaxValue =
    // Maximum value of LastYearValue within the selected indicator
    MAXX(
        CALCULATETABLE(
            ALLSELECTED(LatestData);
            LatestData[Indicator] = CurrentIndicator
        );
        [LastYearValue]
    )

VAR x =
    // Current value to evaluate
    MIN(LatestData[ValueLastYear])

VAR Range =
    // Value range for normalization
    MaxValue - MinValue

VAR Score =
    // Score assignment based on quantile breakpoints
    SWITCH(
        TRUE();
        ISBLANK([LastYearValue]); BLANK();
        x <= MinValue + Range * 0,05; 1;
        x <= MinValue + Range * 0,25; 2;
        x <= MinValue + Range * 0,75; 3;
        x <= MinValue + Range * 0,95; 4;
        5
    )

RETURN
    Score
=============================================================================
TopN_Growth_Flag:=IF( AND(OR([TopN_Growth, Abs]<=5;
[TopN_Growth, Abs]>MAXX(
    ALLSELECTED(LatestData);
    [TopN_Growth, Abs] - 5)); ABS([LastYearValue])>0);
    1; 0
)
=============================================================================

